'use client';

import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { toast } from "@/components/ui/use-toast";
import GeneralSettingsForm from './GeneralSettingsForm';
import BarangayDetailsForm from './BarangayDetailsForm';
import OfficialsForm from './OfficialsForm';
import CertificateTypesForm from './CertificateTypesForm';
import { updateCertificateSettings } from '@/app/(app)/dashboard/certificate-settings/actions';

export default function CertificateSettingsPage({ initialSettings }) {
  const [settings, setSettings] = useState(initialSettings || {});
  const [isSaving, setIsSaving] = useState(false);

  const handleSave = async (updatedSection, sectionKey) => {
    try {
      setIsSaving(true);
      
      // Create a new settings object with the updated section
      const updatedSettings = {
        ...settings,
        [sectionKey]: updatedSection
      };
      
      // Update the settings in the state
      setSettings(updatedSettings);
      
      // Save to the server
      const result = await updateCertificateSettings(updatedSettings);
      
      if (result.success) {
        toast({
          title: "Settings saved",
          description: "Certificate settings have been updated successfully.",
          variant: "success",
        });
      } else {
        toast({
          title: "Error saving settings",
          description: result.message || "An error occurred while saving settings.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error saving settings:', error);
      toast({
        title: "Error saving settings",
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="container py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Certificate Settings</h1>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Manage Certificate Templates</CardTitle>
          <CardDescription>
            Customize the appearance and content of certificates generated by the system.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="general" className="w-full">
            <TabsList className="grid grid-cols-4 mb-8">
              <TabsTrigger value="general">General</TabsTrigger>
              <TabsTrigger value="barangay">Barangay Details</TabsTrigger>
              <TabsTrigger value="officials">Officials</TabsTrigger>
              <TabsTrigger value="certificates">Certificate Types</TabsTrigger>
            </TabsList>
            
            <TabsContent value="general" className="space-y-4">
              <GeneralSettingsForm 
                settings={settings.general || {}} 
                images={settings.images || {}}
                onSave={(updatedGeneral) => handleSave(updatedGeneral, 'general')}
                onImagesSave={(updatedImages) => handleSave(updatedImages, 'images')}
                isSaving={isSaving}
              />
            </TabsContent>
            
            <TabsContent value="barangay" className="space-y-4">
              <BarangayDetailsForm 
                settings={settings.barangayDetails || {}} 
                onSave={(updatedDetails) => handleSave(updatedDetails, 'barangayDetails')}
                isSaving={isSaving}
              />
            </TabsContent>
            
            <TabsContent value="officials" className="space-y-4">
              <OfficialsForm 
                settings={settings.barangayOfficials || {}} 
                onSave={(updatedOfficials) => handleSave(updatedOfficials, 'barangayOfficials')}
                isSaving={isSaving}
              />
            </TabsContent>
            
            <TabsContent value="certificates" className="space-y-4">
              <CertificateTypesForm 
                settings={settings.certificateTypes || {}} 
                onSave={(updatedTypes) => handleSave(updatedTypes, 'certificateTypes')}
                isSaving={isSaving}
              />
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
} 